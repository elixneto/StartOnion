<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StartOnion.CrossCutting</name>
    </assembly>
    <members>
        <member name="T:StartOnion.CrossCutting.Exceptions.JwtNotConfiguredException">
            <summary>
            JWT not configured exception
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Exceptions.JwtNotConfiguredException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:StartOnion.CrossCutting.Extensions.LinqExtensions">
            <summary>
            Extensions for System.Linq
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Extensions.LinqExtensions.Paginate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Pagination for a queryable
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="queryable">Query</param>
            <param name="page">Current page</param>
            <param name="countPerPage">Count records per page</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Extensions.LinqExtensions.SkipAndTake``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Skip then take
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Notifications.INotificationContext">
            <summary>
            Notification context (Notification Pattern)
            </summary>
        </member>
        <member name="P:StartOnion.CrossCutting.Notifications.INotificationContext.Notifications">
            <summary>
            Notifications list
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.INotificationContext.Add(System.String)">
            <summary>
            Add a message to the context
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.INotificationContext.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add messages to the context
            </summary>
            <param name="messages">Messages</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.INotificationContext.Add(StartOnion.CrossCutting.Notifications.Notifiable)">
            <summary>
            Add messages to the context
            </summary>
            <param name="notifiable">Notifiable class</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.INotificationContext.Add(StartOnion.CrossCutting.Notifications.Notifiable[])">
            <summary>
            Add messages to the context
            </summary>
            <param name="notifiableClasses">Notifiable classes</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.INotificationContext.HasNotifications">
            <summary>
            If has notifications
            </summary>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Notifications.Notifiable">
            <summary>
            Notifiable class using FluentValidation
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.Notifiable.AddNotification(System.String)">
            <summary>
            Add a notification to the class
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.Notifiable.AddNotifications(System.Collections.Generic.IList{FluentValidation.Results.ValidationFailure})">
            <summary>
            Add notifications to the class
            </summary>
            <param name="errors"></param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.Notifiable.HasNotifications">
            <summary>
            If has notifications
            </summary>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.Notifiable.GetNotifications">
            <summary>
            Get the notifications
            </summary>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Notifications.NotificationContext">
            <summary>
            Notification context (Notification Pattern)
            </summary>
        </member>
        <member name="P:StartOnion.CrossCutting.Notifications.NotificationContext.Notifications">
            <summary>
            Notifications list
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.NotificationContext.Add(System.String)">
            <summary>
            Add a message to the context
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.NotificationContext.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add messages to the context
            </summary>
            <param name="messages">Messages</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.NotificationContext.Add(StartOnion.CrossCutting.Notifications.Notifiable)">
            <summary>
            Add messages to the context
            </summary>
            <param name="notifiable">Notifiable class</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.NotificationContext.Add(StartOnion.CrossCutting.Notifications.Notifiable[])">
            <summary>
            Add messages to the context
            </summary>
            <param name="notifiables">Notifiable classes</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Notifications.NotificationContext.HasNotifications">
            <summary>
            If has notifications
            </summary>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Notifications.Validator`1">
            <summary>
            Notifiable classes validator
            </summary>
            <typeparam name="T">Notifiable class</typeparam>
        </member>
        <member name="T:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider">
            <summary>
            Token JWT provider
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider.GenerateToken(System.String)">
            <summary>
            Get token JWT
            </summary>
            <param name="id">Identity</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider.GenerateToken(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get token JWT
            </summary>
            <param name="id">Identity</param>
            <param name="expirationDate">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider.GenerateToken(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime})">
            <summary>
            Get token JWT
            </summary>
            <param name="id">Identity</param>
            <param name="roles">Role claims</param>
            /// <param name="expirationDate">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider.GenerateToken(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime})">
            <summary>
            Get token JWT
            </summary>
            <param name="id">Identity</param>
            <param name="customClaims">Custom claims</param>
            <param name="roles">Role claims</param>
            <param name="expirationDate">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider.GetIssuer">
            <summary>
            Get issuer
            </summary>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider.GetAudience">
            <summary>
            Get audience
            </summary>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider.GetSymmetricSecurityKey">
            <summary>
            Get SymmetricSecurityKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.ITokenJwtProvider.GetJwtSecurityTokenObject(System.String)">
            <summary>
            Get JwtSecurityToken by string token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Providers.Authentication.JwtConfiguration">
            <summary>
            JWT Configuration
            </summary>
        </member>
        <member name="P:StartOnion.CrossCutting.Providers.Authentication.JwtConfiguration.SecurityKey">
            <summary>
            Security string key
            </summary>
        </member>
        <member name="P:StartOnion.CrossCutting.Providers.Authentication.JwtConfiguration.Issuer">
            <summary>
            Issuer
            </summary>
        </member>
        <member name="P:StartOnion.CrossCutting.Providers.Authentication.JwtConfiguration.Audience">
            <summary>
            Audience
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.JwtConfiguration.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="securityKey"></param>
            <param name="issuer"></param>
            <param name="audience"></param>
        </member>
        <member name="T:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider">
            <summary>
            Token JWT provider
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.#ctor(StartOnion.CrossCutting.Providers.Authentication.JwtConfiguration)">
            <summary>
            Default constructor
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.GenerateToken(System.String)">
            <summary>
            Get token JWT
            </summary>
            <param name="id">Identity</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.GenerateToken(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get token JWT
            </summary>
            <param name="id">Identity</param>
            <param name="expirationDate">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.GenerateToken(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime})">
            <summary>
            Get token JWT
            </summary>
            <param name="id">Identity</param>
            <param name="roles">Role claims</param>
            /// <param name="expirationDate">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.GenerateToken(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime})">
            <summary>
            Get token JWT
            </summary>
            <param name="id">Identity</param>
            <param name="customClaims">Custom claims</param>
            <param name="roles">Role claims</param>
            <param name="expirationDate">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.GetIssuer">
            <summary>
            Get issuer
            </summary>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.GetAudience">
            <summary>
            Get audience
            </summary>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.GetSymmetricSecurityKey">
            <summary>
            Get SymmetricSecurityKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Providers.Authentication.TokenJwtProvider.GetJwtSecurityTokenObject(System.String)">
            <summary>
            Get JwtSecurityToken by string token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Security.CryptoHelpers.MD5Helper">
            <summary>
            MD5 Crypto
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Security.CryptoHelpers.MD5Helper.Get(System.String,System.Boolean)">
            <summary>
            Convert text to MD5
            </summary>
            <param name="text">Text</param>
            <param name="uppercase">Return is uppercase</param>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Security.CryptoHelpers.ScryptHelper">
            <summary>
            Scrypt Crypto
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Security.CryptoHelpers.ScryptHelper.CryptPassword(System.String,System.String)">
            <summary>
            Get crypto hash
            </summary>
            <param name="pass"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Security.CryptoHelpers.ScryptHelper.CryptText(System.String)">
            <summary>
            Get crypto hash
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Security.CryptoHelpers.ScryptHelper.ValidatePassword(System.String,System.String,System.String)">
            <summary>
            validate password with salt and hash
            </summary>
            <param name="pass"></param>
            <param name="salt"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Security.CryptoHelpers.ScryptHelper.ValidateText(System.String,System.String)">
            <summary>
            validate text with hash
            </summary>
            <param name="text">Texto em plain text a ser verificado</param>
            <param name="hash">Hash a ser verificado</param>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Security.SaltGenerator">
            <summary>
            Salt generator (based in RNGCryptoServiceProvider)
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Security.SaltGenerator.Get(System.Int32)">
            <summary>
            Get a random salt
            </summary>
            <param name="size">Tamanho do salt</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Security.SaltGenerator.GetInBytes(System.Int32)">
            <summary>
            Get a random salt in bytes
            </summary>
            <param name="size">Tamanho do salt</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Security.SaltGenerator.GetInBase64(System.Int32)">
            <summary>
            Get a random salt in Base64 string
            </summary>
            <param name="size">Tamanho do salt</param>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Utilities.Helpers.BrazilianDocuments.CnpjHelper">
            <summary>
            CNPJ Helper
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Utilities.Helpers.BrazilianDocuments.CnpjHelper.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="cnpj">Número do CNPJ (com ou sem másccara)</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Utilities.Helpers.BrazilianDocuments.CnpjHelper.IsValid">
            <summary>
            O CNPJ é válido?
            </summary>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Utilities.Helpers.BrazilianDocuments.CpfHelper">
            <summary>
            CPF Helper
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Utilities.Helpers.BrazilianDocuments.CpfHelper.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="cpf">Número do CPF (com ou sem máscara)</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Utilities.Helpers.BrazilianDocuments.CpfHelper.IsValid">
            <summary>
            O CPF é válido?
            </summary>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Utilities.Helpers.CompressHelper">
            <summary>
            Compress helper
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Utilities.Helpers.CompressHelper.Compress(System.Byte[])">
            <summary>
            Compress a file
            </summary>
            <param name="fileInBytes">Conteúdo do arquivo em Bytes</param>
            <returns></returns>
        </member>
        <member name="M:StartOnion.CrossCutting.Utilities.Helpers.CompressHelper.Compress(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Compress many files
            </summary>
            <param name="filesInBytes"></param>
            <returns></returns>
        </member>
        <member name="T:StartOnion.CrossCutting.Utilities.Helpers.EmailHelper">
            <summary>
            Email helper
            </summary>
        </member>
        <member name="M:StartOnion.CrossCutting.Utilities.Helpers.EmailHelper.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="email">Email</param>
        </member>
        <member name="M:StartOnion.CrossCutting.Utilities.Helpers.EmailHelper.IsValid">
            <summary>
            The email is valid
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
